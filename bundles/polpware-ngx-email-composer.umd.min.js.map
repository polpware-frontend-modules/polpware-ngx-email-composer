{"version":3,"sources":["ng://@polpware/ngx-email-composer/lib/ngx-email-composer.module.ts","ng://@polpware/ngx-email-composer/lib/shared/email-composer-abstract.component.ts"],"names":["NgxEmailComposerModule","imports","TagInputModule","isValidEmail","control","value","test","EmailPattern","parseEmails","addr_list","match","emails","idx","exec","display","substring","replace","push","length","EmailFormAbstractComponent","this","validators","errorMessages","title","messageBody","disableFocusEvent","Object","defineProperty","prototype","onOutOfTagInput","evt","_this","preventDefault","stopPropagation","emailInputBox","formValue","forEach","v","setInputValue","emailBody","nativeElement","focus","viewQuery","rf","ctx"],"mappings":"2YAGA,SAAAA,4CAOaA,iEAAAA,IAAsBC,QAAA,CALtB,CACLC,EAAAA,yFAIKF,EAAsB,CAAAC,QAAA,CAJ3BC,EAAAA,0DCHR,SAASC,EAAaC,GAClB,IAAMC,EAAQD,EAAQC,MAEtB,MADW,eACJC,KAAKD,GACD,KAEJ,CACHF,cAAgB,GAUxB,IAAMI,EAAe,gJAOLC,EAAYC,GAOxB,IAHA,IAEIC,EAFEC,EAAS,GACXC,EAAM,EAEHF,EAAQH,EAAaM,KAAKJ,IAAY,CACzC,IAAIK,OAAO,GACPA,EAAuBL,EAAUM,UAAUH,EAAKF,EAAa,OAnBzDM,QAAQ,2BAA4B,KAoBxCL,EAAOM,KAAK,IAAMH,EAAN,MAA6BJ,EAAM,GAAK,KAGpDC,EAAOM,KAAKP,EAAM,IAEtBE,EAAMF,EAAa,MAAIA,EAAM,GAAGQ,OAEpC,OAAOP,mBAkCP,SAAAQ,IAPOC,KAAAC,WAAa,CAAClB,GACdiB,KAAAE,cAAgB,CACnBnB,aAAgB,8BAOhBiB,KAAKG,MAAQ,oBACbH,KAAKT,OAAS,GACdS,KAAKI,YAAc,GAEnBJ,KAAKK,mBAAoB,SAG7BC,OAAAC,eAAWR,EAAAS,UAAA,mBAAgB,KAA3B,WACI,OAA8B,IAAvBR,KAAKT,OAAOO,wCAKhBC,EAAAS,UAAAC,gBAAP,SAAuBC,GAAvB,IAAAC,EAAAX,KAEQA,KAAKK,oBAITK,EAAIE,iBACJF,EAAIG,kBAIWzB,EAAYY,KAAKc,cAAcC,WAEvCC,SAAQ,SAAAC,GACXN,EAAKpB,OAAOM,KAAKoB,MAGrBjB,KAAKc,cAAcI,cAAc,IAGjClB,KAAKK,mBAAoB,EACzBL,KAAKmB,UAAUC,cAAcC,QAE7BrB,KAAKK,mBAAoB,qCAvDXN,qCAAAA,EAA0BuB,UAAA,SAAAC,EAAAC,UAAA,EAAAD,4RAThBlC,GAG5B,IAFA,IACIC,EADEC,EAAS,GAERD,EAAQH,EAAaM,KAAKJ,IAC7BE,EAAOM,KAAKP,EAAM,IAEtB,OAAOC","sourcesContent":["import { NgModule } from '@angular/core';\nimport { TagInputModule } from 'ngx-chips';\n\n@NgModule({\n    declarations: [],\n    imports: [\n        TagInputModule\n    ],\n    exports: []\n})\nexport class NgxEmailComposerModule { }\n","import { ElementRef, ViewChild } from '@angular/core';\nimport { TagInputComponent } from 'ngx-chips';\n\nfunction isValidEmail(control: { value: any }) {\n    const value = control.value;\n    const re = /\\S+@\\S+\\.\\S+/;\n    if (re.test(value)) {\n        return null;\n    }\n    return {\n        'isValidEmail': true\n    };\n}\n\nfunction display_name(text: string) {\n    /* Remove all quotes \n       Remove whitespace, brackets, and commas from the ends. */\n    return text.replace(/(^[\\s,>]+)|\"|([\\s,<]+$)/g, '');\n}\n\nconst EmailPattern = /[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/g;\n\n/**\n * Parses the given string into an array of email entries.\n * Each entry is like user<user@gmail.com>\n * @param addr_list\n */\nexport function parseEmails(addr_list: string) {\n    /* Regex source:\n        https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\n    */\n    const emails = [];\n    let idx = 0;\n    let match: RegExpExecArray;\n    while (match = EmailPattern.exec(addr_list)) {\n        let display: string;\n        if (display = display_name(addr_list.substring(idx, match['index']))) {\n            emails.push('\"' + display + '\" ' + '<' + match[0] + '>');\n        }\n        else {\n            emails.push(match[0]);\n        }\n        idx = match['index'] + match[0].length;\n    }\n    return emails;\n}\n\n/**\n * Parses the given string into a list of email entries.\n * Each entry is just an email.\n * @param addr_list\n */\nexport function parseOnlyEmails(addr_list: string) {\n    const emails = [];\n    let match: RegExpExecArray;\n    while (match = EmailPattern.exec(addr_list)) {\n        emails.push(match[0]);\n    }\n    return emails;\n}\n\nexport abstract class EmailFormAbstractComponent {\n\n    @ViewChild('emailInputBox') emailInputBox: TagInputComponent;\n    @ViewChild('emailBody') emailBody: ElementRef;\n\n    public title: string;\n\n    public messageBody: string;\n\n    public emails: Array<any>;\n    public validators = [isValidEmail];\n    public errorMessages = {\n        'isValidEmail': 'Please input a valid email'\n    };\n\n    private disableFocusEvent: boolean;\n\n    constructor() {\n\n        this.title = 'Send out an email';\n        this.emails = [];\n        this.messageBody = '';\n\n        this.disableFocusEvent = false;\n    }\n\n    public get isSubmitDisabled(): boolean {\n        return this.emails.length === 0;\n    }\n\n    public abstract onSubmit(): void;\n\n    public onOutOfTagInput(evt: any) {\n\n        if (this.disableFocusEvent) {\n            return;\n        }\n\n        evt.preventDefault();\n        evt.stopPropagation();\n\n        // A tempory hack for fixing the focus issue\n        // on invoking the onAddingRequested method ...\n        const emails = parseEmails(this.emailInputBox.formValue);\n\n        emails.forEach(v => {\n            this.emails.push(v);\n        });\n\n        this.emailInputBox.setInputValue('');\n\n        // Jump to other place\n        this.disableFocusEvent = true;\n        this.emailBody.nativeElement.focus();\n\n        this.disableFocusEvent = false;\n    }\n\n}\n"]}