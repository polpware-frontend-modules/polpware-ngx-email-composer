{"version":3,"sources":["ng://@polpware/ngx-email-composer/lib/ngx-email-composer.module.ts","ng://@polpware/ngx-email-composer/lib/shared/email-composer-abstract.component.ts"],"names":["NgxEmailComposerModule","imports","TagInputModule","isValidEmail","control","value","test","AlertTypeEnum","EmailPattern","parseEmails","addr_list","match","emails","idx","exec","display","substring","replace","push","length","parseOnlyEmails","EmailFormAbstractComponent","this","onTextChange","EventEmitter","onSubmit","onSent","validators","errorMessages","messageTitle","messageBody","disableFocusEvent","Object","defineProperty","prototype","alertType","running","textChanged","evt","emit","submit","_this","forEach","elem","m","outputs","confirmed","emailReceivers","emailBody","emailTitle","sender","alertMessage","alertSubMessage","alertDismissible","then","none","success","error","errorInfo","onOutOfTagInput","emailInputBox","dropdown","isVisible","preventDefault","stopPropagation","formValue","v","setInputValue","nativeElement","focus","viewQuery","rf","ctx"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\nimport { TagInputModule } from 'ngx-chips';\n\n@NgModule({\n    declarations: [],\n    imports: [\n        TagInputModule\n    ],\n    exports: []\n})\nexport class NgxEmailComposerModule { }\n","import { ElementRef, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport { TagInputComponent } from 'ngx-chips';\nimport { Observable } from 'rxjs';\n\nexport function isValidEmail(control: { value: any }) {\n    const value = control.value;\n    const re = /\\S+@\\S+\\.\\S+/;\n    if (re.test(value)) {\n        return null;\n    }\n    return {\n        'isValidEmail': true\n    };\n}\n\nfunction display_name(text: string) {\n    /* Remove all quotes \n       Remove whitespace, brackets, and commas from the ends. */\n    return text.replace(/(^[\\s,>]+)|\"|([\\s,<]+$)/g, '');\n}\n\nconst EmailPattern = /[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/g;\n\n/**\n * Parses the given string into an array of email entries.\n * Each entry is like user<user@gmail.com>\n * @param addr_list\n */\nexport function parseEmails(addr_list: string) {\n    /* Regex source:\n        https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\n    */\n    const emails = [];\n    let idx = 0;\n    let match: RegExpExecArray;\n    while (match = EmailPattern.exec(addr_list)) {\n        let display: string;\n        if (display = display_name(addr_list.substring(idx, match['index']))) {\n            emails.push('\"' + display + '\" ' + '<' + match[0] + '>');\n        }\n        else {\n            emails.push(match[0]);\n        }\n        idx = match['index'] + match[0].length;\n    }\n    return emails;\n}\n\n/**\n * Parses the given string into a list of email entries.\n * Each entry is just an email.\n * @param addr_list\n */\nexport function parseOnlyEmails(addr_list: string) {\n    const emails = [];\n    let match: RegExpExecArray;\n    while (match = EmailPattern.exec(addr_list)) {\n        emails.push(match[0]);\n    }\n    return emails;\n}\n\nexport interface IAutoCompleteModel {\n    value: any;\n    display: string;\n}\n\nexport enum AlertTypeEnum {\n    none = 0,\n    info = 1,\n    warning = 2,\n    running = 3,\n    success = 4,\n    error = 5\n}\n\nexport interface IEmailSenderInput {\n    confirmed?: boolean;\n    emailReceivers?: string[];\n    emailBody?: string;\n    emailTitle?: string;\n    succeed?: boolean;\n}\n\nexport interface IEmailComposerInput {\n    messageTitle?: string;\n    messageBody?: string;\n    autocompleteItemsAsync: Observable<Array<IAutoCompleteModel>>;\n    emails?: Array<any>;\n}\n\nexport abstract class EmailFormAbstractComponent {\n\n    @ViewChild('emailInputBox') emailInputBox: TagInputComponent;\n    @ViewChild('emailBody') emailBody: ElementRef;\n\n    @Input()\n    public messageTitle: string;\n    @Input()\n    public messageBody: string;\n    @Input()\n    autocompleteItemsAsync: Observable<Array<IAutoCompleteModel>>;\n    @Input()\n    sender: (a: IEmailSenderInput) => Promise<any>;\n    @Output()\n    onTextChange = new EventEmitter();\n    @Output()\n    onSubmit = new EventEmitter<IEmailSenderInput>();\n    @Output()\n    onSent = new EventEmitter<{ success: boolean }>();\n\n    alertMessage: string;\n    alertSubMessage: string;\n    alertType: AlertTypeEnum;\n    alertDismissible: boolean;\n\n    public emails: Array<any>;\n    public validators = [isValidEmail];\n    public errorMessages = {\n        'isValidEmail': 'Please input a valid email'\n    };\n\n    private disableFocusEvent: boolean;\n\n    constructor() {\n\n        this.messageTitle = 'Email title';\n        this.emails = [];\n        this.messageBody = '';\n\n        this.disableFocusEvent = false;\n    }\n\n    public get isSubmitDisabled(): boolean {\n        return this.emails.length === 0 || this.alertType === AlertTypeEnum.running;\n    }\n\n    public textChanged(evt: any) {\n        this.onTextChange.emit(evt);\n    }\n\n    public submit() {\n        const emails = [];\n\n        this.emails.forEach(elem => {\n\n            let x = elem || (elem.value);\n            const y = parseOnlyEmails(x);\n            y.forEach(m => {\n                emails.push(m);\n            });\n        });\n\n        const outputs: IEmailSenderInput = {\n            confirmed: true,\n            emailReceivers: emails,\n            emailBody: this.messageBody,\n            emailTitle: this.messageTitle\n        };\n\n        if (this.sender) {\n            this.alertType = AlertTypeEnum.running;\n            this.alertMessage = 'The email is being sent out.';\n            this.alertSubMessage = '';\n            this.alertDismissible = false;\n\n            this.sender(outputs).then(() => {\n                this.alertType = AlertTypeEnum.none;\n                this.onSent && this.onSent.emit({ success: true });\n            }, (error) => {\n                this.alertType = AlertTypeEnum.error;\n                this.alertMessage = 'Something went wrong.';\n                this.alertDismissible = true;\n                this.alertSubMessage = (error && error.errorInfo) ? error.errorInfo : '';\n                this.onSent && this.onSent.emit({ success: false });\n            });\n        }\n\n        this.onSubmit && this.onSubmit.emit(outputs);\n    }\n\n    public onOutOfTagInput(evt: any) {\n\n        if (this.emailInputBox.dropdown && this.emailInputBox.dropdown.isVisible) {\n            return;\n        }\n\n        if (this.disableFocusEvent) {\n            return;\n        }\n\n        evt.preventDefault();\n        evt.stopPropagation();\n\n        // A tempory hack for fixing the focus issue\n        // on invoking the onAddingRequested method ...\n        const emails = parseEmails(this.emailInputBox.formValue);\n\n        emails.forEach(v => {\n            this.emails.push(v);\n        });\n\n        this.emailInputBox.setInputValue('');\n\n        // Jump to other place\n        this.disableFocusEvent = true;\n        this.emailBody.nativeElement.focus();\n\n        this.disableFocusEvent = false;\n    }\n\n}\n"]}