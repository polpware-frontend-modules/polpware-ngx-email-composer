{"version":3,"file":"polpware-ngx-email-composer.umd.js","sources":["ng://@polpware/ngx-email-composer/lib/ngx-email-composer.module.ts","ng://@polpware/ngx-email-composer/lib/shared/email-composer-abstract.component.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { TagInputModule } from 'ngx-chips';\n\n@NgModule({\n    declarations: [],\n    imports: [\n        TagInputModule\n    ],\n    exports: []\n})\nexport class NgxEmailComposerModule { }\n","import { ElementRef, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport { TagInputComponent } from 'ngx-chips';\nimport { Observable } from 'rxjs';\n\nfunction isValidEmail(control: { value: any }) {\n    const value = control.value;\n    const re = /\\S+@\\S+\\.\\S+/;\n    if (re.test(value)) {\n        return null;\n    }\n    return {\n        'isValidEmail': true\n    };\n}\n\nfunction display_name(text: string) {\n    /* Remove all quotes \n       Remove whitespace, brackets, and commas from the ends. */\n    return text.replace(/(^[\\s,>]+)|\"|([\\s,<]+$)/g, '');\n}\n\nconst EmailPattern = /[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/g;\n\n/**\n * Parses the given string into an array of email entries.\n * Each entry is like user<user@gmail.com>\n * @param addr_list\n */\nexport function parseEmails(addr_list: string) {\n    /* Regex source:\n        https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\n    */\n    const emails = [];\n    let idx = 0;\n    let match: RegExpExecArray;\n    while (match = EmailPattern.exec(addr_list)) {\n        let display: string;\n        if (display = display_name(addr_list.substring(idx, match['index']))) {\n            emails.push('\"' + display + '\" ' + '<' + match[0] + '>');\n        }\n        else {\n            emails.push(match[0]);\n        }\n        idx = match['index'] + match[0].length;\n    }\n    return emails;\n}\n\n/**\n * Parses the given string into a list of email entries.\n * Each entry is just an email.\n * @param addr_list\n */\nexport function parseOnlyEmails(addr_list: string) {\n    const emails = [];\n    let match: RegExpExecArray;\n    while (match = EmailPattern.exec(addr_list)) {\n        emails.push(match[0]);\n    }\n    return emails;\n}\n\nexport interface IAutoCompleteModel {\n    value: any;\n    display: string;\n}\n\nexport enum AlertTypeEnum {\n    none = 0,\n    info = 1,\n    warning = 2,\n    running = 3,\n    success = 4,\n    error = 5\n}\n\nexport interface IEmailSenderInput {\n    confirmed?: boolean;\n    emailReceivers?: string[];\n    emailBody?: string;\n    emailTitle?: string;\n    succeed?: boolean;\n}\n\nexport abstract class EmailFormAbstractComponent {\n\n    @ViewChild('emailInputBox') emailInputBox: TagInputComponent;\n    @ViewChild('emailBody') emailBody: ElementRef;\n\n    @Input()\n    public messageTitle: string;\n    @Input()\n    public messageBody: string;\n    @Input()\n    autocompleteItemsAsync: Observable<Array<IAutoCompleteModel>>;\n    @Input()\n    sender: (a: IEmailSenderInput) => Promise<any>;\n    @Output()\n    onTextChange = new EventEmitter();\n    @Output()\n    onSubmit = new EventEmitter<IEmailSenderInput>();\n    @Output()\n    onSent = new EventEmitter<{ success: boolean }>();\n\n    alertMessage: string;\n    alertSubMessage: string;\n    alertType: AlertTypeEnum;\n    alertDismissible: boolean;\n\n    public emails: Array<any>;\n    public validators = [isValidEmail];\n    public errorMessages = {\n        'isValidEmail': 'Please input a valid email'\n    };\n\n    private disableFocusEvent: boolean;\n\n    constructor() {\n\n        this.messageTitle = 'Email title';\n        this.emails = [];\n        this.messageBody = '';\n\n        this.disableFocusEvent = false;\n    }\n\n    public get isSubmitDisabled(): boolean {\n        return this.emails.length === 0 || this.alertType === AlertTypeEnum.running;\n    }\n\n    public submit() {\n        const emails = [];\n\n        this.emails.forEach(elem => {\n\n            let x = elem || (elem.value);\n            const y = parseOnlyEmails(x);\n            y.forEach(m => {\n                emails.push(m);\n            });\n        });\n\n        const outputs: IEmailSenderInput = {\n            confirmed: true,\n            emailReceivers: emails,\n            emailBody: this.messageBody,\n            emailTitle: this.messageTitle\n        };\n\n        if (this.sender) {\n            this.alertType = AlertTypeEnum.running;\n            this.alertMessage = 'The email is being sent out.';\n            this.alertSubMessage = '';\n            this.alertDismissible = false;\n\n            this.sender(outputs).then(() => {\n                this.alertType = AlertTypeEnum.none;\n                this.onSent && this.onSent.emit({ success: true });\n            }, (error) => {\n                this.alertType = AlertTypeEnum.error;\n                this.alertMessage = 'Something went wrong.';\n                this.alertDismissible = true;\n                this.alertSubMessage = (error && error.errorInfo) ? error.errorInfo : '';\n                this.onSent && this.onSent.emit({ success: false });\n            });\n        }\n\n        this.onSubmit && this.onSubmit.emit(outputs);\n    }\n\n    public onOutOfTagInput(evt: any) {\n\n        if (this.emailInputBox.dropdown && this.emailInputBox.dropdown.isVisible) {\n            return;\n        }\n\n        if (this.disableFocusEvent) {\n            return;\n        }\n\n        evt.preventDefault();\n        evt.stopPropagation();\n\n        // A tempory hack for fixing the focus issue\n        // on invoking the onAddingRequested method ...\n        const emails = parseEmails(this.emailInputBox.formValue);\n\n        emails.forEach(v => {\n            this.emails.push(v);\n        });\n\n        this.emailInputBox.setInputValue('');\n\n        // Jump to other place\n        this.disableFocusEvent = true;\n        this.emailBody.nativeElement.focus();\n\n        this.disableFocusEvent = false;\n    }\n\n}\n"],"names":["TagInputModule","NgModule","AlertTypeEnum","EventEmitter"],"mappings":"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"}